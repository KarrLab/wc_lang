""" Prepare a WC model for further processing, such as export or simulation.

:Author: Arthur Goldberg <Arthur.Goldberg@mssm.edu>
:Author: Jonathan Karr <jonrkarr@gmail.com>
:Date: 2018-11-26
:Copyright: 2017-2018, Karr Lab
:License: MIT
"""

from math import isnan
from obj_model.utils import get_component_by_id
from warnings import warn
from wc_lang.core import (SubmodelAlgorithm, Concentration, ConcentrationUnit)
import ast

# configuration
import wc_lang.config.core
config_wc_lang = wc_lang.config.core.get_config()['wc_lang']

EXTRACELLULAR_COMPARTMENT_ID = config_wc_lang['EXTRACELLULAR_COMPARTMENT_ID']


class PrepareModel(object):
    """ Statically prepare a model

    `Models` which validate usually lack data needed to use them. `PrepareModel` automates
    the addition of default and statically computed data to a `Model`.

    Currently added data:

        * Missing concentrations
        * Create implicit exchange reactions for dFBA submodels
        * Ensure that dFBA submodels have objective functions
        * Apply default flux bounds to the reactions in dFBA submodels
    """

    def __init__(self, model):
        self.model = model

    def run(self):
        """ Statically prepare a model by executing all `Prepare` methods.
        """
        self.init_concentrations()

        for submodel in self.model.get_submodels():
            if submodel.algorithm == SubmodelAlgorithm.dfba:
                reactions_created = self.create_dfba_exchange_rxns(submodel,
                                                                   EXTRACELLULAR_COMPARTMENT_ID)
                warn("{} exchange reactions created for submodel '{}'.".format(reactions_created,
                                                                               submodel.name))
                (min_bounds_set, max_bounds_set) = self.apply_default_dfba_submodel_flux_bounds(submodel)
                warn("{} minimum and {} maximum default flux bounds set for submodel '{}'.".format(
                    min_bounds_set, max_bounds_set, submodel.name))

    def create_dfba_exchange_rxns(self, submodel, extracellular_compartment_id):
        """ Create exchange reactions for a dFBA submodel's reaction network.

        To represent FBA's mathematical assumption that it models a closed system, create
        'implicit' forward exchange reactions that synthesize all extracellular metabolites.

        # TODO: To model how other pathways consume metabolites generated by metabolism, create 'implicit'
        reactions which exchange these metabolites between a dFBA metabolism submodel and the other
        pathway(s)/submodel(s).

        Algorithm to synthesize extracellular metabolites::

            E = the set of all extracellular metabolites used by the submodel
            generate a "-> e" reaction for each e in E in the submodel

        Args:
            submodel (`Submodel`): a DFBA submodel
            extracellular_compartment_id (`str`): the id of the extracellular compartment

        Raises:
            ValueError: if `submodel` is not a dFBA submodel

        Returns:
            :obj:`int`: the number of reactions created
        """
        if submodel.algorithm != SubmodelAlgorithm.dfba:
            raise ValueError("submodel '{}' not a dFBA submodel".format(submodel.name))

        reaction_number = 1

        for specie in submodel.get_species():
            if specie.compartment.id == extracellular_compartment_id:

                EXCHANGE_RXN_ID_PREFIX = config_wc_lang['EXCHANGE_RXN_ID_PREFIX']
                EXCHANGE_RXN_NAME_PREFIX = config_wc_lang['EXCHANGE_RXN_NAME_PREFIX']
                # generate a "-> specie" reaction
                new_rxn = submodel.reactions.create(
                    id="{}_{}".format(EXCHANGE_RXN_ID_PREFIX, reaction_number),
                    name="{}_{}".format(EXCHANGE_RXN_NAME_PREFIX, reaction_number),
                    reversible=False,
                    min_flux=-float('inf'),
                    max_flux=float('inf'))
                reaction_number += 1
                new_rxn.participants.create(species=specie, coefficient=1)

        return reaction_number-1

    def apply_default_dfba_submodel_flux_bounds(self, submodel):
        """ Apply default flux bounds to a dFBA submodel's reactions

        The FBA optimizer needs min and max flux bounds for each dFBA submodel reaction.
        If some reactions lack bounds and default bounds are provided in a config file,
        then apply the defaults to the reactions.
        Specifically, min and max default bounds are applied as follows:

            reversible reactions:

              * min_flux = -default_max_flux_bound
              * max_flux = default_max_flux_bound

            irreversible reactions:

              * min_flux = default_min_flux_bound
              * max_flux = default_max_flux_bound

        Args:
            submodel (:obj:`Submodel`): a dFBA submodel

        Raises:
            ValueError: if `submodel` is not a dFBA submodel

        Returns:
            :obj:`tuple`:

                * obj:`int`: number of min flux bounds set to the default
                * obj:`int`: number of max flux bounds set to the default
        """
        if submodel.algorithm != SubmodelAlgorithm.dfba:
            raise ValueError("submodel '{}' not a dFBA submodel".format(submodel.name))

        need_default_flux_bounds = False
        for rxn in submodel.reactions:
            need_default_flux_bounds = need_default_flux_bounds or isnan(rxn.min_flux) or isnan(rxn.max_flux)
        if not need_default_flux_bounds:
            # all reactions have flux bounds
            return (0, 0)

        # Are default flux bounds available? They cannot be negative.
        try:
            default_min_flux_bound = config_wc_lang['default_min_flux_bound']
            default_max_flux_bound = config_wc_lang['default_max_flux_bound']
        except KeyError as e:
            raise ValueError("cannot obtain default_min_flux_bound and default_max_flux_bound=")
        if not 0 <= default_min_flux_bound <= default_max_flux_bound:
            raise ValueError("default flux bounds violate 0 <= default_min_flux_bound <= default_max_flux_bound:\n"
                             "default_min_flux_bound={}; default_max_flux_bound={}".format(default_min_flux_bound,
                                                                                           default_max_flux_bound))

        # Apply default flux bounds to reactions in submodel
        num_default_min_flux_bounds = 0
        num_default_max_flux_bounds = 0
        for rxn in submodel.reactions:
            if isnan(rxn.min_flux):
                num_default_min_flux_bounds += 1
                if rxn.reversible:
                    rxn.min_flux = -default_max_flux_bound
                else:
                    rxn.min_flux = default_min_flux_bound
            if isnan(rxn.max_flux):
                num_default_max_flux_bounds += 1
                rxn.max_flux = default_max_flux_bound
        return (num_default_min_flux_bounds, num_default_max_flux_bounds)

    def init_concentrations(self):
        """ Initialize missing concentration values to 0 """
        missing_species_ids = []
        for species in self.model.get_species():
            if species.concentration is None:
                missing_species_ids.append(species.id)
                species.concentrations = Concentration(
                    id=Concentration.gen_id(species.id),
                    species=species,
                    value=0.0, units=ConcentrationUnit.molecules)
        warn("Assuming missing concentrations for the following metabolites 0:\n  {}".format(
            '\n  '.join(missing_species_ids)))
